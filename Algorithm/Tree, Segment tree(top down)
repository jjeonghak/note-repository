구간의 대표 값(합, 최대, 최소, GDC 등)을 Top down 방식으로 구함
이진트리로 구현
루트가 전체 범위에 대한 대표 값을 가지고 자식들이 범위를 반씩 나누어 대표 값을 저장
부모의 범위를 반씩 나누어 자식들이 해당 범위의 대표 값을 저장
Leaf노드의 Index번호를 따로 구해야 함
범위를 반씩 나누어 가지기 때문에 Leaf노드의 Index번호가 어떻게 나올지 모름
Index 구해서 따로 index저장 배열에 저장해야 함

ll set_tree(int Node, int s, int e)
{
    if (s == e) return segTree[Node] = Arr[s];
    
    int mid = (s + e) / 2;
    ll lbResult = set_tree(node * 2, s, mid);
    ll rbResult = set_tree(node * 2 + 1, mid + 1, e);
    segTree[Node] = lbResult + rbResult;
    return segTree[node];
}
 
ll sum_tree(int node, int s, int e, int lb, int rb)
{
    if (lb > e || rb < s) return 0;
    if (lb <= s && e <= rb) return segTree[Node];
 
    int mid = (s + e) / 2;
    ll lbResult = sum_tree(node * 2, s, mid, lb, rb);
    ll rbResult = sum_tree(node * 2 + 1, mid + 1, e, lb, rb);
    return lbResult + rbResult;
}
 
void update_tree(int node, int s, int e, int index, ll diff)
{
    if (index < s || index > e) return;
    segTree[Node] = segTree[Node] + diff;
 
    if (s != e)
    {
        int mid = (s + e) / 2;
        update_tree(node * 2, s, mid, index, diff);
        update_tree(node * 2 + 1, mid + 1, e, index, diff);
    }
}

